# Makefile.gl — cocotb gate-level (Icarus + sky130)

TOPLEVEL_LANG ?= verilog
TOPLEVEL      = tt_um_mindlessjoe_mips_core   # top del netlist GL (wrapper TT)
MODULE        = tb                            # riusa test/tb.py
SIM          ?= icarus                        # Verilator non va bene con le celle sky130

# Netlist GL: lo step CI deve copiarlo qui (es. cp tt_submission/*.v test/gate_level_netlist.v)
VERILOG_SOURCES = $(shell pwd)/gate_level_netlist.v

# PDK (settati in CI: PDK_ROOT e PDK=sky130A da volare)
PDK        ?= sky130A
SKY130_VERILOG := $(PDK_ROOT)/$(PDK)/libs.ref/sky130_fd_sc_hd/verilog

# Includi i modelli funzionali delle celle standard (ordine importante: primitives prima)
# USE_POWER_PINS per netlist con pin di alimentazione espliciti
# GL per differenziare eventuali ifdef nel netlist
EXTRA_ARGS += -I$(SKY130_VERILOG) \
              $(SKY130_VERILOG)/primitives.v \
              $(SKY130_VERILOG)/sky130_fd_sc_hd.v \
              -DFUNCTIONAL -DUSE_POWER_PINS -DGL -g2012

# Pulizia variabili Python per evitare conflitti con l'ambiente di GitHub
export PYTHONHOME :=
export PYTHONPATH :=

# File di build/risultati separati dall'RTL
SIM_BUILD              = sim_build_gl
export COCOTB_RESULTS_FILE = results_gl.xml

# Log cocotb più compatto
COCOTB_REDUCED_LOG_FMT = 1

# Include makefile cocotb
include $(shell cocotb-config --makefiles)/Makefile.sim

.PHONY: clean
clean::
	$(RM) -r $(SIM_BUILD) *.vcd *.fst $(COCOTB_RESULTS_FILE)
